
### ¿Qué es LinearLayout?

`LinearLayout` es un **ViewGroup** que organiza todos sus elementos (Vistas o ViewGroups) en una única dirección, ya sea **vertical** u **horizontal**. Piensa en ello como una fila o una columna. Es uno de los *layouts* más básicos y utilizados en Android, ideal para diseños simples y directos.

La dirección se define con el atributo `android:orientation`, que puede ser:

  * `horizontal`: Los elementos se colocan uno al lado del otro.
  * `vertical`: Los elementos se colocan uno debajo del otro.

Además, puedes controlar cómo se distribuye el espacio entre los elementos con el atributo **`android:layout_weight`**. Este atributo es muy útil para crear vistas que se expanden para llenar el espacio restante, o para distribuir el espacio de manera proporcional entre varios elementos.

-----

### Ejemplo de LinearLayout en Java

### Caso Práctico: Un formulario de inicio de sesión

Un caso de uso muy común para `LinearLayout` es la creación de formularios. La naturaleza de apilar elementos de forma vertical lo hace perfecto para esto, ya que los campos de texto y botones suelen ir uno debajo del otro.

En este ejemplo, crearemos un **LinearLayout** vertical que contendrá:

1.  Un **TextView** para el título del formulario.
2.  Dos **EditText** para el nombre de usuario y la contraseña.
3.  Un **Button** para el botón de "Iniciar Sesión".

Todo el diseño se creará y se configurará completamente en Java.

-----

### Explicación del Código

1.  **Configurar la actividad**: En el método `onCreate()`, se crea el `LinearLayout` principal. Le daremos una orientación vertical y lo centraremos en la pantalla usando `setGravity(Gravity.CENTER)`.

2.  **Crear vistas**: Se instancian las vistas (`TextView`, `EditText`, `Button`). Es importante pasar el contexto de la actividad (`this`) a sus constructores.

3.  **Configurar propiedades**: Se usan los métodos `setText()` para establecer el texto, `setHint()` para los `EditText`, y `setInputType()` para especificar el tipo de teclado (por ejemplo, para ocultar la contraseña).

4.  **Añadir a un `LinearLayout`**: Se usa el método `addView()` para agregar cada vista al `LinearLayout` principal en el orden deseado. `addView()` se encarga de posicionar automáticamente las vistas una debajo de la otra.

5.  **Establecer como vista principal**: Finalmente, `setContentView(linearLayout)` hace que el `LinearLayout` sea la vista que se muestra en la pantalla de la actividad.

-----

### Ejemplo de Código en Java

Aquí está el código completo que podrías usar en tu `MainActivity.java`.

```java
import android.os.Bundle;
import android.view.Gravity;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.text.InputType;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // 1. Crear el LinearLayout principal
        LinearLayout mainLayout = new LinearLayout(this);
        mainLayout.setLayoutParams(new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT));
        mainLayout.setOrientation(LinearLayout.VERTICAL);
        mainLayout.setGravity(Gravity.CENTER);
        mainLayout.setPadding(64, 64, 64, 64); // Un padding para centrar mejor el contenido

        // 2. Crear los LayoutParams para los elementos hijos (con márgenes)
        LinearLayout.LayoutParams childParams = new LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.WRAP_CONTENT);
        childParams.setMargins(0, 16, 0, 16); // Márgenes para separar los elementos

        // 3. Crear y configurar el TextView del título
        TextView titleTextView = new TextView(this);
        titleTextView.setText("Iniciar Sesión");
        titleTextView.setTextSize(24);
        titleTextView.setGravity(Gravity.CENTER);
        titleTextView.setLayoutParams(childParams);

        // 4. Crear y configurar el EditText para el nombre de usuario
        EditText usernameEditText = new EditText(this);
        usernameEditText.setHint("Nombre de usuario");
        usernameEditText.setLayoutParams(childParams);

        // 5. Crear y configurar el EditText para la contraseña
        EditText passwordEditText = new EditText(this);
        passwordEditText.setHint("Contraseña");
        passwordEditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
        passwordEditText.setLayoutParams(childParams);

        // 6. Crear y configurar el Button de inicio de sesión
        Button loginButton = new Button(this);
        loginButton.setText("Acceder");
        loginButton.setLayoutParams(childParams);

        // 7. Añadir todas las vistas al LinearLayout principal
        mainLayout.addView(titleTextView);
        mainLayout.addView(usernameEditText);
        mainLayout.addView(passwordEditText);
        mainLayout.addView(loginButton);

        // 8. Establecer el LinearLayout como la vista principal de la actividad
        setContentView(mainLayout);


        // Nota: El siguiente código que se produce de forma automática
        // debe ser comentado:
        //EdgeToEdge.enable(this);
        //setContentView(R.layout.activity_main);
        //ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
        //    Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
        //    v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
        //    return insets;
        // });
    }
}
```

Este código produce una interfaz de usuario simple y funcional para un formulario de inicio de sesión, todo creado de forma programática con `LinearLayout`. Este enfoque es útil para diseños que se generan dinámicamente o para cuando se requiere una personalización profunda de las vistas antes de ser agregadas.

************
DESCRIPCIÓN:
************
El código Java que proporcionaste es un ejemplo detallado de cómo crear una interfaz de usuario (**UI**) de manera programática en Android, es decir, sin usar archivos de diseño XML.

A continuación, te explico cada parte del código:

-----

### 1\. Preparación y Creación del Contenedor Principal (`LinearLayout`)

```java
// 1. Crear el LinearLayout principal
LinearLayout mainLayout = new LinearLayout(this);
mainLayout.setLayoutParams(new ViewGroup.LayoutParams(
        ViewGroup.LayoutParams.MATCH_PARENT,
        ViewGroup.LayoutParams.MATCH_PARENT));
mainLayout.setOrientation(LinearLayout.VERTICAL);
mainLayout.setGravity(Gravity.CENTER);
mainLayout.setPadding(64, 64, 64, 64);
```

  * **`LinearLayout mainLayout = new LinearLayout(this);`**: Se crea una nueva instancia de `LinearLayout`. `this` se refiere a la `MainActivity` y se utiliza como el **contexto** necesario para crear la vista.
  * **`mainLayout.setLayoutParams(...)`**: Se definen los parámetros de diseño del `LinearLayout`. En este caso, se le indica que ocupe todo el ancho y alto de la pantalla (`MATCH_PARENT`).
  * **`mainLayout.setOrientation(LinearLayout.VERTICAL);`**: Esta es la clave del `LinearLayout`. Le dice que los elementos hijos se apilen uno debajo del otro de forma vertical.
  * **`mainLayout.setGravity(Gravity.CENTER);`**: Centra todo el contenido del `LinearLayout` (todos los elementos hijos) tanto horizontal como verticalmente dentro de él.
  * **`mainLayout.setPadding(64, 64, 64, 64);`**: Establece un relleno (espacio interno) en los cuatro lados de la vista, lo que evita que los elementos queden pegados a los bordes de la pantalla.

-----

### 2\. Creación de los Parámetros de los Elementos Hijos (`childParams`)

```java
// 2. Crear los LayoutParams para los elementos hijos (con márgenes)
LinearLayout.LayoutParams childParams = new LinearLayout.LayoutParams(
        ViewGroup.LayoutParams.MATCH_PARENT,
        ViewGroup.LayoutParams.WRAP_CONTENT);
childParams.setMargins(0, 16, 0, 16);
```

  * **`LinearLayout.LayoutParams childParams = ...`**: Se crea un objeto `LayoutParams` específico para los elementos que irán dentro del `LinearLayout`. Este objeto define cómo se comportarán las vistas hijas dentro de su padre.
  * **`ViewGroup.LayoutParams.MATCH_PARENT` y `ViewGroup.LayoutParams.WRAP_CONTENT`**: Indican que los elementos hijos (`TextView`, `EditText`, `Button`) ocuparán todo el ancho disponible (`MATCH_PARENT`) y solo el alto necesario para su contenido (`WRAP_CONTENT`).
  * **`childParams.setMargins(0, 16, 0, 16);`**: Establece un margen (espacio externo) de 16 píxeles en la parte superior e inferior de cada elemento para separarlos.

-----

### 3\. Creación y Configuración de los Elementos de UI

Este bloque de código crea las vistas individuales (`TextView`, `EditText` y `Button`) y les asigna sus propiedades, como el texto, el tamaño o el tipo de entrada de teclado.

  * **`new TextView(this);`**: Se crea un `TextView` para el título.
  * **`titleTextView.setText("Iniciar Sesión");`**: Se le asigna el texto "Iniciar Sesión".
  * **`usernameEditText.setHint("Nombre de usuario");`**: Se le añade un texto de sugerencia al `EditText`.
  * **`passwordEditText.setInputType(...)`**: Se define el tipo de teclado y se especifica que es un campo de contraseña para que el texto aparezca oculto.
  * **`view.setLayoutParams(childParams);`**: Se asignan los parámetros de diseño (`childParams`) que se crearon en el paso 2 a cada una de las vistas.

-----

### 4\. Añadir los Elementos al Layout Principal

```java
// 7. Añadir todas las vistas al LinearLayout principal
mainLayout.addView(titleTextView);
mainLayout.addView(usernameEditText);
mainLayout.addView(passwordEditText);
mainLayout.addView(loginButton);
```

  * **`mainLayout.addView(view);`**: Con este método, se añaden las vistas (`TextView`, `EditText`, etc.) al `mainLayout`. El orden en que se añaden es el mismo en que se mostrarán en la pantalla, de arriba a abajo.

-----

### 5\. Asignación de la Vista a la Actividad

```java
// 8. Establecer el LinearLayout como la vista principal de la actividad
setContentView(mainLayout);
```

  * **`setContentView(mainLayout);`**: Esta es la línea más importante. Le dice a la actividad que la vista principal que debe mostrar en la pantalla es el `LinearLayout` que acabamos de construir.

### ¿Por qué viste "Hello World\!"?

Como se explicó anteriormente, el problema es que, después de ejecutar todo este código para crear el diseño programáticamente, el método `onCreate` de tu actividad sobrescribe el diseño con la línea **`setContentView(R.layout.activity_main);`**. Esta línea le indica a la actividad que ignore el diseño programático y cargue el diseño desde el archivo XML que solo contiene el "Hello World\!", lo que causa que el diseño del formulario de inicio de sesión nunca se muestre.